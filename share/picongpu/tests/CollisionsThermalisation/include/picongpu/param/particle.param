/* Copyright 2013-2021 Axel Huebl, Rene Widera, Benjamin Worpitz,
 *                     Richard Pausch, Pawel Ordyna
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

/** @file
 *
 * Configurations for particle manipulators. Set up and declare functors that
 * can be used in speciesInitalization.param for particle species
 * initialization and manipulation, such as temperature distributions, drifts,
 * pre-ionization and in-cell position.
 */

#pragma once

#include "picongpu/particles/startPosition/functors.def"
#include "picongpu/particles/manipulators/manipulators.def"
#include "picongpu/particles/traits/GetAtomicNumbers.hpp"
#include "picongpu/param/physicalConstants.param"

#include <pmacc/nvidia/functors/Add.hpp>
#include <pmacc/nvidia/functors/Assign.hpp>


namespace picongpu
{
    namespace particles
    {
        /** a particle with a weighting below MIN_WEIGHTING will not
         *      be created / will be deleted
         *
         *  unit: none */
        constexpr float_X MIN_WEIGHTING = 0.01;

        /** Number of maximum particles per cell during density profile evaluation.
         *
         * Determines the weighting of a macro particle and with it, the number of
         * particles "sampling" dynamics in phase space.
         */
        constexpr uint32_t TYPICAL_PARTICLES_PER_CELL = 350u;

        namespace manipulators
        {
            // define a drift in X equal to 200 keV for electrons
            CONST_VECTOR(float_X, 3, DriftParam_direction, 1.0, 0.0, 0.0);
            struct Drift200keVParam
            {
                static constexpr float_64 gamma = 1.39139;
                const DriftParam_direction_t direction;
            };
            using Assign200keVDrift = unary::Drift<Drift200keVParam, nvidia::functors::Assign>;

            struct TemperatureParamElectrons
            {
                /** Initial temperature
                 *  unit: keV
                 */
                static constexpr float_64 temperature = SI::ELECTRON_MASS_SI * SI::SPEED_OF_LIGHT_SI
                    * SI::SPEED_OF_LIGHT_SI * UNITCONV_Joule_to_keV * 0.0002;
            };
            struct TemperatureParamIons
            {
                /** Initial temperature
                 *  unit: keV
                 */
                static constexpr float_64 temperature = SI::ELECTRON_MASS_SI * SI::SPEED_OF_LIGHT_SI
                    * SI::SPEED_OF_LIGHT_SI * UNITCONV_Joule_to_keV * 0.00018;
            };
            using AddTemperatureElectrons = unary::Temperature<TemperatureParamElectrons>;
            using AddTemperatureIons = unary::Temperature<TemperatureParamIons>;

            struct OnceIonizedImpl
            {
                template<typename T_Particle>
                DINLINE void operator()(T_Particle& particle)
                {
                    constexpr float_X ion1plus = GetAtomicNumbers<T_Particle>::type::numberOfProtons - 1._X;

                    // set (Z - 1) bound electrons
                    particle[boundElectrons_] = ion1plus;
                }
            };


            using OnceIonized = generic::Free<OnceIonizedImpl>;

        } // namespace manipulators


        namespace startPosition
        {
            struct QuietParam1000ppc
            {
                /** Count of particles per cell per direction at initial state
                 *  unit: none
                 */
                using numParticlesPerDimension = typename mCT::shrinkTo<mCT::Int<1000, 1, 1>, simDim>::type;
            };
            struct QuietParam5000ppc
            {
                /** Count of particles per cell per direction at initial state
                 *  unit: none
                 */
                using numParticlesPerDimension = typename mCT::shrinkTo<mCT::Int<5000, 1, 1>, simDim>::type;
            };

            // definition of quiet particle start
            using Quiet1000ppc = QuietImpl<QuietParam1000ppc>;
            using Quiet5000ppc = QuietImpl<QuietParam5000ppc>;

        } // namespace startPosition
    } // namespace particles
} // namespace picongpu
